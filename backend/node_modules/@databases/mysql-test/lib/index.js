"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.killDatabase = exports.waitForConnection = void 0;
const with_container_1 = require("@databases/with-container");
const mysql_config_1 = require("@databases/mysql-config");
const { createConnection } = require('mysql2');
const config = (0, mysql_config_1.getMySqlConfigSync)();
const DEFAULT_MYSQL_DEBUG = !!process.env.MYSQL_TEST_DEBUG || config.test.debug;
const DEFAULT_IMAGE = process.env.MYSQL_TEST_IMAGE || config.test.image;
const DEFAULT_CONTAINER_NAME = process.env.MYSQL_TEST_CONTAINER_NAME || config.test.containerName;
if (process.env.MYSQL_TEST_CONNECT_TIMEOUT_SECONDS &&
    !/^\d+$/.test(process.env.MYSQL_TEST_CONNECT_TIMEOUT_SECONDS)) {
    throw new Error('Expected MYSQL_TEST_CONNECT_TIMEOUT_SECONDS environment variable to be a positive integer');
}
const DEFAULT_CONNECT_TIMEOUT_SECONDS = process.env
    .MYSQL_TEST_CONNECT_TIMEOUT_SECONDS
    ? parseInt(process.env.MYSQL_TEST_CONNECT_TIMEOUT_SECONDS, 10)
    : config.test.connectTimeoutSeconds;
const DEFAULT_MYSQL_PORT = 3306;
const DEFAULT_MYSQL_USER = process.env.MYSQL_TEST_USER || config.test.mySqlUser;
const DEFAULT_MYSQL_PASSWORD = process.env.MYSQL_TEST_PASSWORD || config.test.mySqlPassword;
const DEFAULT_MYSQL_DB = process.env.MYSQL_TEST_DB || config.test.mySqlDb;
async function waitForConnection(databaseURL, timeoutSeconds) {
    const start = Date.now();
    const timeoutMilliseconds = timeoutSeconds * 1000;
    let lastAttempt = false;
    while (true) {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        let conn;
        try {
            try {
                await new Promise((resolve, reject) => {
                    let errored = false;
                    conn = createConnection(databaseURL);
                    const createConnectionErr = new Error();
                    conn.once('connect', () => {
                        resolve();
                    });
                    conn.on('error', (err) => {
                        if (errored)
                            return;
                        errored = true;
                        createConnectionErr.message = err.message;
                        createConnectionErr.code = err.code;
                        createConnectionErr.errno = err.errno;
                        createConnectionErr.sqlState = err.sqlState;
                        reject(createConnectionErr);
                    });
                });
                const result = await new Promise((resolve, reject) => {
                    const queryErr = new Error();
                    conn.query(`SELECT 1 + 1 AS foo;`, (err, result) => {
                        if (err) {
                            queryErr.message = err.message;
                            reject(queryErr);
                        }
                        else {
                            resolve(result);
                        }
                    });
                });
                if (result && result[0] && result[0].foo === 2) {
                    break;
                }
                else {
                    if (lastAttempt) {
                        throw new Error('Got unexpected result: ' + JSON.stringify(result));
                    }
                }
            }
            catch (ex) {
                if (lastAttempt) {
                    throw ex;
                }
            }
        }
        finally {
            conn.end(() => {
                // ignore error closing connection
            });
        }
        if (Date.now() - timeoutMilliseconds > start) {
            lastAttempt = true;
        }
    }
}
exports.waitForConnection = waitForConnection;
async function killDatabase(options = {}) {
    await (0, with_container_1.killOldContainers)({
        debug: DEFAULT_MYSQL_DEBUG,
        containerName: DEFAULT_CONTAINER_NAME,
        ...options,
    });
}
exports.killDatabase = killDatabase;
async function getDatabase(options = {}) {
    const { mysqlUser, mysqlPassword, mysqlDb, environment, ...rawOptions } = {
        debug: DEFAULT_MYSQL_DEBUG,
        image: DEFAULT_IMAGE,
        containerName: DEFAULT_CONTAINER_NAME,
        connectTimeoutSeconds: DEFAULT_CONNECT_TIMEOUT_SECONDS,
        mysqlUser: DEFAULT_MYSQL_USER,
        mysqlPassword: DEFAULT_MYSQL_PASSWORD,
        mysqlDb: DEFAULT_MYSQL_DB,
        defaultExternalPort: DEFAULT_MYSQL_PORT,
        externalPort: config.test.port,
        ...options,
    };
    const { proc, externalPort, kill } = await (0, with_container_1.default)({
        ...rawOptions,
        internalPort: DEFAULT_MYSQL_PORT,
        environment: {
            MYSQL_ALLOW_EMPTY_PASSWORD: 'true',
            MYSQL_HOST: '127.0.0.1',
            MYSQL_ROOT_HOST: '%',
            ...environment,
            MYSQL_USER: mysqlUser,
            MYSQL_PASSWORD: mysqlPassword,
            MYSQL_DATABASE: mysqlDb,
        },
        enableDebugInstructions: `To view logs, run with MYSQL_TEST_DEBUG=true environment variable.`,
    });
    const databaseURL = `mysql://${mysqlUser}:${mysqlPassword}@localhost:${externalPort}/${mysqlDb}`;
    await waitForConnection(databaseURL, rawOptions.connectTimeoutSeconds);
    return {
        proc,
        databaseURL,
        kill,
    };
}
exports.default = getDatabase;
//# sourceMappingURL=index.js.map