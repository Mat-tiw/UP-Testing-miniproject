"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.killers = void 0;
const mysql_config_1 = require("@databases/mysql-config");
const __1 = require("../");
const modern_spawn_1 = require("modern-spawn");
const config = (0, mysql_config_1.getMySqlConfigSync)();
const DEFAULT_ENV_VAR = process.env.MYSQL_TEST_ENV_VAR || config.connectionStringEnvironmentVariable;
exports.killers = [];
async function setup(opts = {}) {
    const envVar = opts.environmentVariable || DEFAULT_ENV_VAR;
    const migrationsScript = opts.migrationsScript ||
        (process.env.MYSQL_TEST_MIGRATIONS_SCRIPT
            ? process.env.MYSQL_TEST_MIGRATIONS_SCRIPT.split(' ')
            : config.test.migrationsScript);
    if (process.env[envVar]) {
        console.info(`Using existing mysql database from: ${envVar}`);
        return;
    }
    const { databaseURL, kill } = await (0, __1.default)(opts);
    console.info(`Setting mysql connection string on environment: ${envVar}`);
    process.env[envVar] = databaseURL;
    if (migrationsScript) {
        console.info('Running mysql migrations');
        if (typeof migrationsScript === 'string') {
            await (0, modern_spawn_1.execBuffered)(migrationsScript, {
                debug: opts.debug ||
                    (opts.debug === undefined && config.test.debug) ||
                    false,
            }).getResult();
        }
        else {
            await (0, modern_spawn_1.spawnBuffered)(migrationsScript[0], migrationsScript.slice(1), {
                debug: opts.debug ||
                    (opts.debug === undefined && config.test.debug) ||
                    false,
            }).getResult();
        }
    }
    exports.killers.push(async () => {
        delete process.env[envVar];
        await kill();
    });
}
exports.default = setup;
module.exports = setup;
module.exports.default = setup;
module.exports.killers = exports.killers;
//# sourceMappingURL=globalSetup.js.map